kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: "{{ tpa_single_node_namespace }}"
  labels:
    app.kubernetes.io/name: spog-ui-nginx
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: redhat-trusted-profile-analyzer
    app.kubernetes.io/version: 1.1.1
    app.kubernetes.io/part-of: trusted-profile-analyzer
data:
  nginx.conf: |
    worker_processes auto;
    error_log /dev/stdout info;

    # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
    include /usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /dev/stdout  main;

        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 2048;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        # Load modular configuration files from the /etc/nginx/conf.d directory.
        # See http://nginx.org/en/docs/ngx_core_module.html#include
        # for more information.
        include /etc/nginx/conf.d/*.conf;

        server {
            listen 80;
            server_name  _;
               
            root   /public;
            absolute_redirect off;

            error_page 404 =200 /index.html;

            location /endpoints/ {
                alias /endpoints/;
            }

            location / {
                index index.html;
            }

            location /branding/ {
                try_files $uri @default;
            }

            location @default {
                rewrite ^/branding(.*)$ $1 break;
                root /public/branding-default;
            }

            location ~* \.html$ {
                add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            }         
        }
        
        server {
            listen 8084;
            server_name _;

            location / {
                proxy_pass http://127.0.0.1:8084;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        server {
            listen 443 ssl;
            server_name _;

            # SSL certificate and key
            ssl_certificate /etc/nginx/ssl/server.crt;
            ssl_certificate_key /etc/nginx/ssl/server.key;

            # SSL options for stronger security
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers on;

            # Location block to forward traffic to backend service
            location / {
                proxy_pass http://127.0.0.1:80;  # Backend HTTP service
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }         

        types {
            application/wasm wasm;
        }

    }
